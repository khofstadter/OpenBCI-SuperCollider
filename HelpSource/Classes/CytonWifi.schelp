class:: CytonWifi
summary:: for communicating with the Cyton board (8ch)
categories:: External Control
related:: Classes/OpenBCI, Classes/Cyton, Classes/GanglionWifi

description::
this class is for communication via wifi osc (wifishield). use link::Classes/CytonSerial:: for the bluetooth dongle.

note::
does not survive link::Classes/CmdPeriod::.
::

classmethods::

method::new
open communication

argument::netAddr
a link::Classes/NetAddr:: with the ip and port of the wifi shield. by default this is code::NetAddr("OpenBCI_WifiShieldOSC.local", 13999)::

argument::reset
perform a soft reset at startup or not.

argument::dataAction
set the link::Classes/OpenBCI#-dataAction::

argument::replyAction
set the link::Classes/OpenBCI#-replyAction::. note that if none give a default function that just posts will be used.

argument::initAction
set the link::Classes/OpenBCI#-initAction::

instancemethods::

private:: initCytonWifi, prCommand, prCommandArray

method::port
set the port that the wifi shield is sending to. by default this is 57120 (supercollider)

code::c.port= 9998  //send to port 9998::

method::latency
set the minimum time between packet sends in micro seconds. usable values are in the range of 100 to 15000. by default this is 5000. for high sampling rates (16000Hz) a lower number might be needed here (~4000). else the packages will fill up the internal buffer inside the wifi shield before the data is sent out. for lower sampling rates (250Hz) this latency value can be set to a higher value (~10000).

method::netAddr
the link::Classes/NetAddr:: of the wifi shield.

method::all
get heap info and other general info.

method::board
get information about the attached board.

method::name
get the unique name of the wifi shield.

method::version
gives the version number of the firmware.

method::close
stops main loop and closes the serial port.

examples::

code::
//start and post every 256th data package (num is the package counter 0-255)
c= CytonWifi(NetAddr("OpenBCI_WifiShieldOSC.local", 13999), dataAction:{|num, data, aux, byte| if(num==0, {data.postln})}, initAction:{|b| b.start});

c.port= 14000  //change port
c.port= 57120  //by default sclang port is used

c.latency= 4000  //tune latency in microseconds. 100-15000 are usable values

c.dataAction= {|num, data, aux, byte| data.postln}  //post everything (note: might crash)
c.dataAction= nil;

c.dataAction= {|num, data, aux, stop| (data/8388607).postln}  //normalize sample data
c.dataAction= nil;

c.accelAction= {|accel| accel.postln}  //post xyz accelerometer data
c.accelAction= nil;

c.name
c.version
c.board
c.all

c.getSampleRate
c.dataAction= {|num, data, aux, byte| if(num==0, {data.postln})}  //again only post every 256th package
c.setSampleRate(6)
c.setSampleRate(5)
c.setSampleRate(4)
c.setSampleRate(3)
c.setSampleRate(2)
c.setSampleRate(1)
c.setSampleRate(0)
c.stop

c.getBoardMode
c.getVersion
c.getDefaultChannelSettings
c.getWifiStatus

c.query  //register settings. slow to reply

c.softReset
c.softResetWifi
c.start
c.stop
c.close


//--more tests
c= CytonWifi(NetAddr("OpenBCI_WifiShieldOSC.local", 13999));
c.dataAction= {|num, data, aux, stop| data.postln}

c.start
c.off(1)  //turn off the first channel
c.off([2, 3, 4])
c.off((1..8))  //all off
c.on(3)
c.on((1..8))  //all on

c.test1AmpSlow  //test signal
c.test1AmpFast
c.testGnd
c.test2AmpSlow
c.test2AmpFast
c.testDC
c.stop

c.getDefaultChannelSettings
c.start
c.settings(3, 0, 2, 0, 1, 1, 0)  //set channel 3 gain to 2 (default is 6)
c.stop

c.impedance(4, 1, 0)  //channel 4 is set up to measure impedance on the P input (N input off)
c.impedance(4, 0, 1)  //channel 4 is set up to measure impedance on the N input (P input off)



//TODO - these does not work - why?  (all commands starting with 0xF0)
c.getRadioChannel
c.setRadioChannel(7)
c.setRadioHostChannel(7, true)
c.getRadioPollTime
c.setRadioPollTime(80)
c.setRadioHostBaudRate(0, true)
c.getRadioSystemStatus
c.attachWifi
c.removeWifi
::
